generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  email          String?       @unique
  name           String?
  number         String?
  type           UserType
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  bookings       Booking[]

  @@index([organisationId])
}

model Organisation {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  created_by String?
  name       String     @unique
  users      User[]
  facilities Facility[]
}

model Activity {
  id          String             @id @default(uuid())
  name        String
  description String?
  type        ActivityType
  venues      Venue[]
}

model Facility {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String             @unique
  email            String
  organisation     Organisation       @relation(fields: [organisationId], references: [id])
  organisationId   String
  venues           Venue[]
  bookings         Booking[]
  phone            String
  latitude         Decimal            @db.Decimal(8, 6)
  longitude        Decimal            @db.Decimal(9, 6)
  address          String
  description      String?

  @@index([organisationId])
}

model Venue {
  id                 String          @id @default(uuid())
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  name               String          @unique
  facility           Facility?       @relation(fields: [facilityId], references: [id])
  facilityId         String?
  schedules          Schedule[]
  bookings           Booking[]
  address            String?
  description        String?
  type               VenueType
  maxPlayersCapacity Int?
  activities         Activity[]

  @@index([facilityId])
}

model Booking {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  facility   Facility @relation(fields: [facilityId], references: [id])
  facilityId String
  venue      Venue    @relation(fields: [venueId], references: [id])
  venueId    String
  startTime  DateTime
  endTime    DateTime

  @@index([userId])
  @@index([facilityId])
  @@index([venueId])
}

model Schedule {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  venue     Venue    @relation(fields: [venueId], references: [id])
  venueId   String
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime

  @@index([venueId])
}

enum UserType {
  ADMIN
  USER
}

enum VenueType {
  INDOOR
  OUTDOOR
}

enum ActivityType {
  CARDIO
  FITNESS
  YOGA
  AEROBIC
  DANCE
  ZUMBA
  PILATES
  CROSSFIT
  BOXING
  MARTIAL_ARTS
  SWIMMING
  CYCLING
  RUNNING
  FOOTBALL
  BASKETBALL
  TENNIS
  BADMINTON
  HANDBALL
  VOLLEYBALL
  TABLE_TENNIS
}
